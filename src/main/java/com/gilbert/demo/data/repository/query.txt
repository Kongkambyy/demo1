CREATE DATABASE gilbertTest;
USE gilbertTest;

-- Create users table
CREATE TABLE users (
    UserID VARCHAR(50),
    Name VARCHAR(100) NOT NULL,
    Alias VARCHAR(100) NOT NULL,
    Password VARCHAR(255) NOT NULL,
    Email VARCHAR(100) NOT NULL UNIQUE,
    Number VARCHAR(50),
    Address VARCHAR(255),
    PRIMARY KEY (UserID)
);

-- Create categories table
CREATE TABLE categories (
    CategoryID INT AUTO_INCREMENT,
    Name VARCHAR(100) NOT NULL,
    Description VARCHAR(512),
    ParentID INT NULL,
    PRIMARY KEY(CategoryID),
    FOREIGN KEY (ParentID) REFERENCES categories(CategoryID) ON DELETE CASCADE
);

-- Create listings table
CREATE TABLE listings (
    AdID VARCHAR(50),
    UserID VARCHAR(50),
    Title VARCHAR(255) NOT NULL,
    Description VARCHAR(512),
    Price INT NOT NULL,
    CreatedDate VARCHAR(50),
    ItemCondition VARCHAR(50),
    Status VARCHAR(50),
    Brand VARCHAR(100),
    CategoryID INT,
    PRIMARY KEY (AdID),
    FOREIGN KEY (UserID) REFERENCES users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (CategoryID) REFERENCES categories(CategoryID) ON DELETE CASCADE
);

-- Create favorites table
CREATE TABLE favorites (
    FavoriteID VARCHAR(50),
    UserID VARCHAR(50),
    ListingAdID VARCHAR(50),
    CreatedDate VARCHAR(50),
    PRIMARY KEY (FavoriteID),
    FOREIGN KEY (UserID) REFERENCES users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (ListingAdID) REFERENCES listings(AdID) ON DELETE CASCADE,
    UNIQUE (UserID, ListingAdID)
);

-- Create reviews table
CREATE TABLE reviews (
    ReviewID VARCHAR(50),
    ReviewerID VARCHAR(50),
    ReviewedUserID VARCHAR(50),
    Rating INT NOT NULL,
    Comment VARCHAR(512),
    CreatedDate VARCHAR(50),
    PRIMARY KEY (ReviewID),
    FOREIGN KEY (ReviewerID) REFERENCES users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (ReviewedUserID) REFERENCES users(UserID) ON DELETE CASCADE
);

-- Create transactions table
CREATE TABLE transactions (
    TransactionID VARCHAR(50),
    ListingID VARCHAR(50),
    BuyerID VARCHAR(50),
    SellerID VARCHAR(50),
    Amount INT NOT NULL,
    Status VARCHAR(50) NOT NULL,
    CreatedDate VARCHAR(50),
    CompletedDate VARCHAR(50) NULL,
    PRIMARY KEY (TransactionID),
    FOREIGN KEY (ListingID) REFERENCES listings(AdID) ON DELETE CASCADE,
    FOREIGN KEY (BuyerID) REFERENCES users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (SellerID) REFERENCES users(UserID) ON DELETE CASCADE
);

-- Create offers table
CREATE TABLE offers (
    OfferID VARCHAR(50),
    ListingID VARCHAR(50),
    BuyerID VARCHAR(50),
    SellerID VARCHAR(50),
    OriginalPrice INT NOT NULL,
    OfferAmount INT NOT NULL,
    Status VARCHAR(50) NOT NULL,
    CreatedDate VARCHAR(50),
    ExpiryDate VARCHAR(50),
    PRIMARY KEY (OfferID),
    FOREIGN KEY (ListingID) REFERENCES listings(AdID) ON DELETE CASCADE,
    FOREIGN KEY (BuyerID) REFERENCES users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (SellerID) REFERENCES users(UserID) ON DELETE CASCADE
);

-- Create messages table
CREATE TABLE messages (
    MessageID VARCHAR(50),
    SenderID VARCHAR(50),
    ReceiverID VARCHAR(50),
    Message VARCHAR(512) NOT NULL,
    Date VARCHAR(50),
    IsRead BOOLEAN DEFAULT FALSE,
    PRIMARY KEY (MessageID),
    FOREIGN KEY (SenderID) REFERENCES users(UserID) ON DELETE CASCADE,
    FOREIGN KEY (ReceiverID) REFERENCES users(UserID) ON DELETE CASCADE
);

-- Create notifications table
CREATE TABLE notifications (
    NotificationID VARCHAR(50),
    UserID VARCHAR(50),
    SourceID VARCHAR(100),
    SourceType VARCHAR(50),
    Type VARCHAR(50),
    Message VARCHAR(255),
    IsRead BOOLEAN DEFAULT FALSE,
    CreatedDate VARCHAR(50),
    PRIMARY KEY (NotificationID),
    FOREIGN KEY (UserID) REFERENCES users(UserID) ON DELETE CASCADE
);
